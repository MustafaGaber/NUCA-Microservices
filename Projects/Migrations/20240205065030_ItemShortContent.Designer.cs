// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NUCA.Projects.Data;

#nullable disable

namespace NUCA.Projects.Migrations
{
    [DbContext(typeof(ProjectsDatabaseContext))]
    [Migration("20240205065030_ItemShortContent")]
    partial class ItemShortContent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassificationProject", b =>
                {
                    b.Property<long>("ClassificationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassificationsId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("ClassificationProject");
                });

            modelBuilder.Entity("DepartmentUser", b =>
                {
                    b.Property<long>("DepartmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("DepartmentUser");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.Boq", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("PriceChangePercent")
                        .HasColumnType("float");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Boqs");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqDepartment", b =>
                {
                    b.Property<long>("BoqId")
                        .HasColumnType("bigint");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.HasKey("BoqId", "DepartmentId");

                    b.ToTable("BoqDepartment");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoqSectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPerformanceRate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("ShortContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sovereign")
                        .HasColumnType("bit");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoqSectionId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("BoqItem");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoqTableId")
                        .HasColumnType("bigint");

                    b.Property<long>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPerformanceRate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sovereign")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoqTableId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("BoqSection");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoqId")
                        .HasColumnType("bigint");

                    b.Property<long>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPerformanceRate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceChangePercent")
                        .HasColumnType("float");

                    b.Property<bool>("Sovereign")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoqId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("BoqTable");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Companies.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CommercialIndustrialTaxFree")
                        .HasColumnType("bit");

                    b.Property<string>("CommercialRegister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElectronicInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TaxAuthorityId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaxAuthorityId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Departments.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Projects.ModifiedEndDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Value")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ModifiedEndDate");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Projects.Privilege", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Privilege");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("AdvancePaymentGuaranteeLetterExpiryDate")
                        .HasColumnType("date");

                    b.Property<long?>("AdvancePaymentLedgerId")
                        .HasColumnType("bigint");

                    b.Property<double?>("AdvancePaymentPercentage")
                        .HasColumnType("float");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AssigneeBankBranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssigneeMainBankId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AwardTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BankBranchId")
                        .HasColumnType("bigint");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ContractPapersCount")
                        .HasColumnType("int");

                    b.Property<int?>("ContractsCount")
                        .HasColumnType("int");

                    b.Property<long>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FinalDeliveryDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FinalGuaranteeLetterExpiryDate")
                        .HasColumnType("date");

                    b.Property<long?>("FromLedgerId")
                        .HasColumnType("bigint");

                    b.Property<int>("FundingType")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("HandoverDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("InitialDeliveryDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("InitialDeliverySigningDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("InsurancePolicyExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MainBankId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Sovereign")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("TaxAuthorityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ToLedgerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ValueAddedTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<bool>("WaivedToBank")
                        .HasColumnType("bit");

                    b.Property<long>("WorkTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdvancePaymentLedgerId");

                    b.HasIndex("AssigneeBankBranchId");

                    b.HasIndex("AssigneeMainBankId");

                    b.HasIndex("AwardTypeId");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("FromLedgerId");

                    b.HasIndex("MainBankId");

                    b.HasIndex("TaxAuthorityId");

                    b.HasIndex("ToLedgerId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.AwardType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstimatedPrice")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AwardTypes");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.BankBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("MainBankId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainBankId");

                    b.ToTable("BankBranches");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.Classification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classification");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.CostCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentFullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.Ledger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentFullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.MainBank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MainBanks");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.TaxAuthority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaxAuthorities");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.WorkType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("CommercialIndustrialTaxPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SelfEmploymentTaxPercent")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ValueAddedTaxPercent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settlements.AdvancePaymentDeduction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SettlementId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SettlementId")
                        .IsUnique()
                        .HasFilter("[SettlementId] IS NOT NULL");

                    b.ToTable("AdvancePaymentDeductions");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settlements.Settlement", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<double>("AdditionalStampTax")
                        .HasColumnType("float");

                    b.Property<double>("AdvancePaymentPercent")
                        .HasColumnType("float");

                    b.Property<double>("AdvancePaymentValue")
                        .HasColumnType("float");

                    b.Property<double>("ApplicatorsSyndicateValue")
                        .HasColumnType("float");

                    b.Property<double>("CommercialIndustrialTax")
                        .HasColumnType("float");

                    b.Property<double>("CompletionGuaranteeValue")
                        .HasColumnType("float");

                    b.Property<double>("ConractStampTax")
                        .HasColumnType("float");

                    b.Property<double>("ContractorsFederationValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EngineersSyndicateValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("NetAmount")
                        .HasColumnType("float");

                    b.Property<double>("PreviousTotalSupplies")
                        .HasColumnType("float");

                    b.Property<double>("PreviousTotalWorks")
                        .HasColumnType("float");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<double>("RegularStampTax")
                        .HasColumnType("float");

                    b.Property<double>("ResourceDevelopmentTax")
                        .HasColumnType("float");

                    b.Property<double>("SelfEmploymentTax")
                        .HasColumnType("float");

                    b.Property<double>("ServiceTax")
                        .HasColumnType("float");

                    b.Property<int>("StatementIndex")
                        .HasColumnType("int");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<double>("SupervisionCommission")
                        .HasColumnType("float");

                    b.Property<double>("TahyaMisrFundValue")
                        .HasColumnType("float");

                    b.Property<double>("TotalSupplies")
                        .HasColumnType("float");

                    b.Property<double>("TotalWorks")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ValueAddedTax")
                        .HasColumnType("float");

                    b.Property<double>("ValueAddedTaxPercent")
                        .HasColumnType("float");

                    b.Property<double>("WasteRemovalInsurance")
                        .HasColumnType("float");

                    b.Property<DateOnly>("WorksDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settlements.SettlementWithholding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FromStatement")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SettlementId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SettlementId");

                    b.ToTable("SettlementWithholding");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.ExternalSuppliesItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<double>("PreviousQuantity")
                        .HasColumnType("float");

                    b.Property<long>("StatementId")
                        .HasColumnType("bigint");

                    b.Property<long>("SuppliesTableId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("ExternalSuppliesItem");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.PercentageDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<long>("StatementItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatementItemId");

                    b.ToTable("PercentageDetail");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.Statement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Final")
                        .HasColumnType("bit");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceChangePercent")
                        .HasColumnType("float");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateOnly>("SubmissionDate")
                        .HasColumnType("date");

                    b.Property<double>("TotalSupplies")
                        .HasColumnType("float");

                    b.Property<double>("TotalWorks")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("WorksDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoqItemId")
                        .HasColumnType("bigint");

                    b.Property<double>("BoqQuantity")
                        .HasColumnType("float");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPerformanceRate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<double>("PreviousNetPrice")
                        .HasColumnType("float");

                    b.Property<double>("PreviousQuantity")
                        .HasColumnType("float");

                    b.Property<bool>("Sovereign")
                        .HasColumnType("bit");

                    b.Property<long>("StatementSectionId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatementSectionId");

                    b.ToTable("StatementItem");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoqSectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatementTableId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatementTableId");

                    b.ToTable("StatementSection");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoqTableId")
                        .HasColumnType("bigint");

                    b.Property<int>("BoqTableType")
                        .HasColumnType("int");

                    b.Property<long>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceChangePercent")
                        .HasColumnType("float");

                    b.Property<long>("StatementId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("StatementTable");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementWithholding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatementId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("StatementWithholding");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.UserSubmission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrivilegeType")
                        .HasColumnType("int");

                    b.Property<long>("StatementId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("UserSubmission");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassificationProject", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.Classification", null)
                        .WithMany()
                        .HasForeignKey("ClassificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentUser", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.Boq", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Projects.Project", "Project")
                        .WithOne("Boq")
                        .HasForeignKey("NUCA.Projects.Domain.Entities.Boqs.Boq", "ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqDepartment", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Boqs.Boq", null)
                        .WithMany("Departments")
                        .HasForeignKey("BoqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqItem", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Boqs.BoqSection", null)
                        .WithMany("Items")
                        .HasForeignKey("BoqSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqSection", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Boqs.BoqTable", null)
                        .WithMany("Sections")
                        .HasForeignKey("BoqTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqTable", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Boqs.Boq", null)
                        .WithMany("Tables")
                        .HasForeignKey("BoqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Companies.Company", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.TaxAuthority", "TaxAuthority")
                        .WithMany("Companies")
                        .HasForeignKey("TaxAuthorityId");

                    b.Navigation("TaxAuthority");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Projects.ModifiedEndDate", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Projects.Project", null)
                        .WithMany("ModifiedEndDates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Projects.Privilege", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Projects.Project", null)
                        .WithMany("Privileges")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Projects.Project", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.Ledger", "AdvancePaymentLedger")
                        .WithMany()
                        .HasForeignKey("AdvancePaymentLedgerId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.BankBranch", "AssigneeBankBranch")
                        .WithMany()
                        .HasForeignKey("AssigneeBankBranchId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.MainBank", "AssigneeMainBank")
                        .WithMany()
                        .HasForeignKey("AssigneeMainBankId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.AwardType", "AwardType")
                        .WithMany()
                        .HasForeignKey("AwardTypeId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Companies.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.Ledger", "FromLedger")
                        .WithMany()
                        .HasForeignKey("FromLedgerId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.MainBank", "MainBank")
                        .WithMany()
                        .HasForeignKey("MainBankId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.TaxAuthority", "TaxAuthority")
                        .WithMany()
                        .HasForeignKey("TaxAuthorityId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.Ledger", "ToLedger")
                        .WithMany()
                        .HasForeignKey("ToLedgerId");

                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("NUCA.Projects.Domain.Entities.Shared.Duration", "Duration", b1 =>
                        {
                            b1.Property<long>("ProjectId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Days")
                                .HasColumnType("int");

                            b1.Property<int>("Months")
                                .HasColumnType("int");

                            b1.Property<int>("Years")
                                .HasColumnType("int");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("AdvancePaymentLedger");

                    b.Navigation("AssigneeBankBranch");

                    b.Navigation("AssigneeMainBank");

                    b.Navigation("AwardType");

                    b.Navigation("BankBranch");

                    b.Navigation("Company");

                    b.Navigation("CostCenter");

                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("FromLedger");

                    b.Navigation("MainBank");

                    b.Navigation("TaxAuthority");

                    b.Navigation("ToLedger");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.BankBranch", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.MainBank", "MainBank")
                        .WithMany("Branches")
                        .HasForeignKey("MainBankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainBank");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.CostCenter", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.CostCenter", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.Ledger", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Settings.Ledger", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settlements.AdvancePaymentDeduction", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Projects.Project", null)
                        .WithMany("AdvancePaymentDeductions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Settlements.Settlement", null)
                        .WithOne("AdvancePaymentDeduction")
                        .HasForeignKey("NUCA.Projects.Domain.Entities.Settlements.AdvancePaymentDeduction", "SettlementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settlements.Settlement", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Statements.Statement", "Statement")
                        .WithOne()
                        .HasForeignKey("NUCA.Projects.Domain.Entities.Settlements.Settlement", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NUCA.Projects.Domain.Entities.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settlements.SettlementWithholding", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Settlements.Settlement", null)
                        .WithMany("Withholdings")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.ExternalSuppliesItem", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Statements.Statement", null)
                        .WithMany("ExternalSuppliesItems")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.PercentageDetail", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Statements.StatementItem", null)
                        .WithMany("PercentageDetails")
                        .HasForeignKey("StatementItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.Statement", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Projects.Project", null)
                        .WithMany("Statements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementItem", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Statements.StatementSection", null)
                        .WithMany("Items")
                        .HasForeignKey("StatementSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementSection", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Statements.StatementTable", null)
                        .WithMany("Sections")
                        .HasForeignKey("StatementTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementTable", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Statements.Statement", null)
                        .WithMany("Tables")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementWithholding", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Statements.Statement", null)
                        .WithMany("Withholdings")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.UserSubmission", b =>
                {
                    b.HasOne("NUCA.Projects.Domain.Entities.Statements.Statement", null)
                        .WithMany("Submissions")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.Boq", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqSection", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Boqs.BoqTable", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Companies.Company", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Projects.Project", b =>
                {
                    b.Navigation("AdvancePaymentDeductions");

                    b.Navigation("Boq");

                    b.Navigation("ModifiedEndDates");

                    b.Navigation("Privileges");

                    b.Navigation("Statements");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.CostCenter", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.Ledger", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.MainBank", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settings.TaxAuthority", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Settlements.Settlement", b =>
                {
                    b.Navigation("AdvancePaymentDeduction");

                    b.Navigation("Withholdings");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.Statement", b =>
                {
                    b.Navigation("ExternalSuppliesItems");

                    b.Navigation("Submissions");

                    b.Navigation("Tables");

                    b.Navigation("Withholdings");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementItem", b =>
                {
                    b.Navigation("PercentageDetails");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementSection", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("NUCA.Projects.Domain.Entities.Statements.StatementTable", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
